<% @title = "Embedding a Juvia comments page" %>
<h2>Embedding a Juvia comments page</h2>

<h3>Introduction</h3>

<p>In Juvia, comments are contained in two hierarchical layers. Comments are
contained within <em>topics</em>. Topics are are contained within
<em>sites</em>. A site is owned by exactly one user who can administer
everything within it. This is similar to how many web forums works.</p>

<p>Sites must be registered (created) manually, but topics are automatically
created upon posting a comment to a particular topic.</p>

<p>Embedding a Juvia comments page only involves embedding some JavaScript code.
Embedding happens entirely in the browser: the page in which Juvia comments are
embedded does not require any server-side modifications. Juvia uses various
cross-domain request techniques in order to pull this off.</p>

<p>Juvia does not use any <code>iframe</code>s. The HTML for displaying the comments
and the form is directly embedded inside the page. In order to work well with AJAX
web pages, Juvia never reloads the current page, nor does it ever redirect to another
page.</p>

<p><textarea readonly class="code" style="display: block"><%= html_unsafe(
    render(:partial => 'admin/help/code.txt'))
%></textarea></p>

<p>The beginning of the JavaScript is where the options are. Some of them must be set
before the JavaScript works properly.</p>
<ul>
<li>The <strong>container path</strong>. This is a CSS path referring to the DOM
    element in which you want to embed the Juvia comments page, for example
    <code>#comments</code> or <code>.main .comment-container &gt; div</code>.</li>
<li>The <strong>site_key</strong>. This is a unique identifier for a site, which was
    automatically generated by Juvia upon registering one.</li>
<li><p>The <strong>topic_key</strong>. This is a unique identifier within the context of
    a site (it is allowed for another topic within another site to have the same topic key).
    Unlike the site key, the topic key is not pre-generated: you can pick one yourself,
    but it must not be longer than 255 characters.</p>

    <p>When a comment is posted it is automatically stored within the topic that is referred
    to by the given site key and the topic key. If there is no topic with such a topic key
    within the site, then the topic is created.</p>

    <p class="bottom">The site key and the topic key are merely identifiers necessary for Juvia to work.
    They are never shown to the visitor.</p></li>
<li>The <strong>topic_url</strong> (optional) is a permalink URL to the page that
    contains the comments. If a new topic needs to be created, then it will be associated
    with this URL. Otherwise, the value of topic_url is unused.</li>
<li>The <strong>topic_title</strong> specifies a title for topic_url.
    If a new topic needs to be created, then it will be given this title. Otherwise,
    the value of topic_title is unused.</li>
<li><strong>include_base</strong> (optional, boolean, default: true) specifies whether the base Juvia
    runtime JavaScript code should be loaded. Useful for saving bandwidth if it has already been
    loaded before. See <a href="#ajax_support">AJAX support</a> for more information.</li>
<li><strong>include_css</strong> (optional, boolean, default: true) specifies whether the
    Juvia CSS should be loaded. Useful for saving bandwidth if it has already been
    loaded before. See <a href="#ajax_support">AJAX support</a> for more information.</li>
<li><strong>comment_order</strong> (optional, 'latest-first' or 'earliest-first', default: 'latest-first')
    specifies whether the comments should be displayed with the latest post at the top, or with the
    earliest post at the top instead. Latest-first is Juvia's default sort order.</li>
</ul>

<h3>Cross-domain requests</h3>
<p>Fetching from and posting to on other domains is usually forbidden by the browser's
<a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>.
Newer browsers support a mechanism called
<a href="http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing">Cross-Origin Resource Sharing</a>
(CORS) which allows browsers to perform AJAX calls to other domains, and Juvia uses
this <a href="http://caniuse.com/cors">whenever possible</a>.</p>

<p>On older browsers that don't support CORS, Juvia falls back to a
<a href="http://en.wikipedia.org/wiki/JSONP">JSONP</a>-like technique that
involves injecting <code>script</code> tags to perform cross-domain requests.
Request parameters are embedded in the tag's URL. However, because browsers
<a href="http://stackoverflow.com/questions/812925/what-is-the-maximum-possible-length-of-a-query-string">impose a limit</a>
on the maximum size of URLs, only a limited amount of data can be posted.
The lowest common denominator seems to be Internet Explorer which imposes
a limit of 2083 characters. This means that on non-CORS capable browsers,
the user will be unable to post large comments. In order to reduce the
impact of this problem, Juvia compresses the comment text with zlib.</p>

<h3 id="ajax_support">AJAX support</h3>
<p>Juvia has full support for AJAX web pages, i.e. web pages that are dynamically
updated without reloading the page itself or redirecting to another page. Simply
execute the Juvia embedding code again (with possibly different options) and everything
will work as expected. It is even possible to <a href="#embed_multiple">embed multiple Juvia
comment pages on a single web page</a>.</p>

<p>However the second time you load a Juvia comment page may result in some
things to be redundantly loaded again. To see what's redundant, let's consider what
a Juvia comment page consists of:</p>
<ol>
<li>The base Juvia runtime code in JavaScript.</li>
<li>The Juvia CSS.</li>
<li>The actual comments.</li>
</ol>

<p>Items 1 and 2 are already loaded the first time you load a Juvia comment page.
You can omit them by setting the <strong>include_base</strong> and
<strong>include_css</strong> options to false.</p>

<h3 id="embed_multiple">Embedding multiple comment pages on a single web page</h3>
<p>It is possible to embed multiple Juvia comment pages on a single web page. Just
specify different container paths for each of them. And just as described in
<a href="#ajax_support">AJAX support</a>, the base runtime code and the CSS are redundantly loaded the second time, so you can omit them by settings <em>include_base</em> and <em>include_css</em> to false.</p>
